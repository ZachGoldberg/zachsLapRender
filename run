#!/bin/bash

export PYTHONPATH=src/:$PYTHONPATH
pushd "$base" &> /dev/null

trap 'popd &> /dev/null' EXIT

SCRIPT=$(basename "$0")
RUNPWD=$(dirname "$0")
COMMAND=${1-help}
FUNCTION=run_$(echo $COMMAND | sed 's/-/_/g')
shift

# ensure the working directory is the directory of this script
cd $(cd $(dirname "$0") && pwd)

# Utility Functions
die() {
	echo "$@" >&2
	exit 1
}
available_functions() {
	declare -F | sed 's/^declare -f //' | grep '^run_'
}

available_commands() {
	available_functions | sed 's/^run_//' | sed 's/_/-/g'
}

remove_pyc_files() {
	find . -name '*.pyc' -delete
}

check_root() {
	[ "$(id -u)" == 0 ]
}

run_python() {
    # Run python with all of our ENV vars
    python $@
}

run_zachs() {
    python src/main.py $@
}

run_test_harrys_csv_parser() {
    run_zachs --analyze-data --input-data-file=samples/LapTimerGPSRecDB.csv $@
}

run_test_video_analyze() {
    run_zachs --analyze-videos --video-directory=samples/ $@
}

run_test_video_matching() {
    run_zachs --analyze-videos --video-directory=samples/ $@
}

run_test_real_video_analyze() {
    run_zachs --analyze-videos -vd="/home/zgoldberg/Videos/RacingVideos/Streets8142016/" --input-data-file=samples/LapTimerGPSRecDB.csv $@
}

run_test_real_video() {
    run_zachs  -vd="/home/zgoldberg/Videos/RacingVideos/Streets8142016/" --input-data-file=samples/LapTimerGPSRecDB.csv $@
}


run_test_real_video2() {
    run_zachs -t='StreetsofWillow(CW)' -vd="/home/zgoldberg/Videos/RacingVideos/StreetsCW1082016/" --input-data-file=laps10082016.csv -vv  $@
}

run_post_session() {
    if [ -z $1 ]; then
        echo "Usage: $0 $1 <trackname> [videodirectory] [inputdatafile]"
        exit 1
    fi

    track=$1
    videodir=$2
    datafile=$3

    if [ -z $videodir ]; then
        videodir=~/Videos/RacingVideos/`ls ~/Videos/RacingVideos/ --sort=time --group-directories-first | head -n1`
    fi

    if [ -z $datafile ]; then
        datafile=`pwd`/lapdata/`ls lapdata/ --sort=time | head -n1`
    fi

    # Upload all sessions
    run_zachs -t="$track" -vd="$videodir" --input-data-file=$datafile -v -s -y

    # TODO auto discover newest videos / video file
    # Upload fastest 3 laps
    run_zachs -t="$track" -vd "$videodir" --input-data-file=$datafile -v -fl 1 -y
    run_zachs -t="$track" -vd="$videodir" --input-data-file=$datafile -v -fl 2 -y
    run_zachs -t="$track" -vd="$videodir" --input-data-file=$datafile -v -fl 3 -y

    # Upload comparison of fastest two laps
    run_zachs -t="$track" -vd="$videodir" --input-data-file=$datafile -v -c -cl 1,2
}

run_install_completion () {
    echo "[ -x $PWD/run ] && eval \"\`$PWD/run completion\`\"" >> ~/.bashrc

}

run_completion() {
	# This needs to be run through `eval` in order to work in your shell
	cat <<-EOF
		_run_completion() {
			COMPREPLY=( \$(COMP_WORDS="\${COMP_WORDS[*]}" COMP_CWORD=\$COMP_CWORD "\$1") )
		}
		complete -o default -F _run_completion $SCRIPT
	EOF
}

run_help() {
	echo "Available commands:"
	available_commands | while read name; do
		echo "	$name"
	done
}

# Bash completion
if [ -n "$COMP_WORDS" ]; then
	COMP_WORDS=( $COMP_WORDS )
	FIRST_WORD=${COMP_WORDS[1]}
	CURRENT_WORD=${COMP_WORDS[COMP_CWORD]}

	case "$COMP_CWORD" in
		1)
			available_commands | grep "^$CURRENT_WORD"
			;;
		3)
	esac

	exit 0
fi

# Check for invalid command
if ! available_functions | grep -q "^$FUNCTION$"; then
	die "'$COMMAND' is not a valid command. Type '$SCRIPT help' for possible commands."
fi

# Execute the command
$FUNCTION "$@"
